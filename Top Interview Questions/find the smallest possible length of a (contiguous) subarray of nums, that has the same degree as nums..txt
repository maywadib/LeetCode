import numpy as np
class Solution(object):
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        sortedArr = []
        for num in nums:
            sortedArr.append(num)
        for i in range(len(sortedArr)):
            swap = i + np.argmin(sortedArr[i:])
            (sortedArr[i], sortedArr[swap]) = (sortedArr[swap], sortedArr[i])


        compare = {}
        json = {'start': -1, 'end': -1, 'deg': 0}
        
        deg = 1
        maxDeg  = 1
        value = []
        value.append(sortedArr[0])
        compare[str(sortedArr[0])] = json
        for index in range(1, len(sortedArr)):
            if sortedArr[index-1 ] == sortedArr[index]:
                deg = deg + 1
                if maxDeg == deg:
                    value.append(sortedArr[index])
                    compare[str(sortedArr[index])] = json
                elif maxDeg < deg:
                    value = []
                    value.append(sortedArr[index])
                    compare = {}
                    compare[str(sortedArr[index])] = json
                    maxDeg = deg
            else:
                deg = 1
                
        print(compare)
        for idx, num in enumerate(nums):
            # idx = idx-1
            if str(num) in compare:
                if compare[str(num)]['start'] == -1:
                    compare[str(num)]['end'] = idx
                    compare[str(num)]['start'] = idx
                else:
                    compare[str(num)]['end'] = idx
                compare[str(num)]['deg'] = compare[str(num)]['deg'] + 1 
                print(compare)
                if compare[str(num)]['deg'] == maxDeg:
                    return (compare[str(num)]['end'] - compare[str(num)]['start']) +1
                
